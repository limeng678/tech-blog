(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{261:function(e,t,r){"use strict";r.r(t);var s=r(0),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"cors-初步探究跨域资源分享"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cors-初步探究跨域资源分享"}},[e._v("#")]),e._v(" CORS 初步探究跨域资源分享")]),e._v(" "),r("h2",{attrs:{id:"什么是同域-同源政策"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是同域-同源政策"}},[e._v("#")]),e._v(" 什么是同域, 同源政策")]),e._v(" "),r("p",[e._v("同域就是"),r("strong",[e._v("同协议")]),e._v("， "),r("strong",[e._v("同 hostname")]),e._v("， "),r("strong",[e._v("同端口")]),e._v(" 的 domain。"),r("strong",[e._v("同域政策")]),e._v(" (SOP, Same Origin Policy) 规定只有同域之间才能互相进行资源访问。超出此范围都算"),r("strong",[e._v("跨域请求")]),e._v(" (CORS, Cross-Origin Resource Sharing)。")]),e._v(" "),r("p",[r("strong",[e._v("同源政策")]),e._v(" 只存在于浏览器-服务器之间，curl，postman 等软件不会受其影响。")]),e._v(" "),r("h2",{attrs:{id:"如何实现跨域请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何实现跨域请求"}},[e._v("#")]),e._v(" 如何实现跨域请求")]),e._v(" "),r("p",[e._v("跨域分为两种： 简单请求和预检验请求。两者关系互斥， 不存在任何交集")]),e._v(" "),r("h3",{attrs:{id:"简单请求-simple-request"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单请求-simple-request"}},[e._v("#")]),e._v(" 简单请求(Simple Request)")]),e._v(" "),r("p",[e._v("只要不触发预检验的都是简单请求，以下是触发简单请求的条件：")]),e._v(" "),r("ul",[r("li",[e._v("使用下列方法之一：\n"),r("ul",[r("li",[r("code",[e._v("GET")])]),e._v(" "),r("li",[r("code",[e._v("HEAD")])]),e._v(" "),r("li",[r("code",[e._v("POST")])])])]),e._v(" "),r("li",[r("code",[e._v("Content-Type")]),e._v(" 仅限于以下几种：\n"),r("ul",[r("li",[r("code",[e._v("text/plain")])]),e._v(" "),r("li",[r("code",[e._v("multipart/form-data")])]),e._v(" "),r("li",[r("code",[e._v("application/x-www-form-urlencoded")])])])]),e._v(" "),r("li",[e._v("除了规范里定义的 subset 之外没有任何"),r("code",[e._v("header")])])]),e._v(" "),r("h3",{attrs:{id:"预检验请求-pre-flighted-request"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#预检验请求-pre-flighted-request"}},[e._v("#")]),e._v(" 预检验请求(Pre-flighted Request)")]),e._v(" "),r("p",[e._v("那么很明显，只要不符合简单请求的都能划分到预检验请求中。")]),e._v(" "),r("p",[e._v("在预检验中，浏览器会预先发送一个 OPTIONS 请求，作为预先检验，从而使服务器判定这个请求是否安全。如果你的 origin 在服务器的"),r("code",[e._v("Access-Control-Allow-Origin")]),e._v(" 里，那么你就被允许跨域访问了。接下来就可以进行发送正式的 request 请求了。")]),e._v(" "),r("p",[e._v("预检验请求每次都会被重新加载，为了减少重载次数可以设置"),r("code",[e._v("Access-Control-Max-Age")]),e._v(" 响应头，设置最大缓存时间。")]),e._v(" "),r("h2",{attrs:{id:"cors-安全吗"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cors-安全吗"}},[e._v("#")]),e._v(" CORS 安全吗")]),e._v(" "),r("p",[e._v("安全。当初没有同源政策的限制时，只要 hacker 能获取你的 cookie 就能为所欲为。这就是同源政策存在的原因。有人会说既然 CORS 能够实现跨域访问，那么之前的问题不就又出现了吗？没错，It's back again。但"),r("strong",[e._v("CORS 没有在跨域请求里包含了 cookie")]),e._v("， 这是和以前最大的区别。")]),e._v(" "),r("p",[e._v("当然，你想携带 cookie 也是允许的。但出于安全的考虑，需要在客户端和服务端设置验证功能，当"),r("code",[e._v("Access-Control-Allow-Credentials")]),e._v(" 被设置为"),r("code",[e._v("true")]),e._v("时，也能进行跨域请求。问题也出在这儿，许多服务器会盲目地根据用户的 Origin Value 来把用户添加进"),r("code",[e._v("Access-Control-Allow-Origin")]),e._v(" 里，这时只要用户稍作修改也是能够轻易攻破的，这也是一个安全问题。")]),e._v(" "),r("h2",{attrs:{id:"引用链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#引用链接"}},[e._v("#")]),e._v(" 引用链接")]),e._v(" "),r("p",[r("a",{attrs:{href:"http://performantcode.com/web/do-you-really-know-cors",target:"_blank",rel:"noopener noreferrer"}},[e._v("Do you really know CORS?"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=o.exports}}]);