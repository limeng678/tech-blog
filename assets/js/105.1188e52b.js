(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{347:function(e,t,o){"use strict";o.r(t);var v=o(0),s=Object(v.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"vuex-文档初探-一-为何需要-vuex"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#vuex-文档初探-一-为何需要-vuex"}},[e._v("#")]),e._v(" Vuex 文档初探(一): 为何需要 Vuex")]),e._v(" "),o("p",[e._v("当一个 Vue 应用的规模越来越大时, 我们总是会遇到这样一种情况: 组件之间有一些状态是需要共享的. 于是我们会使用"),o("code",[e._v("props")]),e._v("+"),o("code",[e._v("$emit")]),e._v("的方法来解决. 在小项目里这是可行的, 但是在大型项目里, 重复地使用则会导致许多问题(比如使组件变得臃肿, 使得可维护性变得困难). 因此衍生出了状态管理工具. 我们把需要共享的数据放在一个全局的环境里. 并且它是唯一的(single source of truth), 我们叫它"),o("code",[e._v("store")]),e._v(", 放在"),o("code",[e._v("store")]),e._v("里的数据称为"),o("code",[e._v("state")]),e._v(". 组件里的数据都要从"),o("code",[e._v("store")]),e._v("里的"),o("code",[e._v("state")]),e._v("获取, 组件不能修改状态, 它只能向"),o("code",[e._v("store")]),e._v("提交修改请求, 由"),o("code",[e._v("store")]),e._v("修改. 又因为"),o("code",[e._v("store")]),e._v("里的"),o("code",[e._v("state")]),e._v("都是响应式(reactive), 所以会触发 UI 的重新渲染, 新的数据会渲染到组件里去. 这就是状态管理工具的核心功能. Vue 推出了官方的状态管理工具: Vuex.接下来我们将深入 Vuex 的具体使用.")])])}),[],!1,null,null,null);t.default=s.exports}}]);